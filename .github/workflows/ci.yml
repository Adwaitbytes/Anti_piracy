name: SecureStream CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      run: |
        pytest tests/ --cov=secure_stream --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build-web:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
    
    - name: Install dependencies
      run: |
        cd dashboard
        npm install
    
    - name: Build web dashboard
      run: |
        cd dashboard
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: web-build
        path: dashboard/build

  build-mobile:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '2.x'
    
    - name: Install dependencies
      run: |
        cd mobile
        flutter pub get
    
    - name: Build Android APK
      run: |
        cd mobile
        flutter build apk
    
    - name: Upload APK
      uses: actions/upload-artifact@v2
      with:
        name: android-apk
        path: mobile/build/app/outputs/flutter-apk/app-release.apk

  deploy:
    runs-on: ubuntu-latest
    needs: [build-web, build-mobile]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v2
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release for SecureStream
          
          Contains:
          - Web Dashboard
          - Android APK
          - API Server
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./android-apk/app-release.apk
        asset_name: SecureStream.apk
        asset_content_type: application/vnd.android.package-archive
